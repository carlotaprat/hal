needs "listings"
needs "xcolor"

print "
\\newcommand{\\CodeSymbol}[1]{\\textcolor{brown}{#1}}
\\lstdefinelanguage{hal}{
    basicstyle=\\ttfamily,
    sensitive=true,
    morestring=[b]\",
    keywords=[1]{for,in,while,if,else,elif,class,def,with,return,import,from},
    keywords=[2]{Array, print, self, yield, block_given?},
    keywordstyle=[1]\\color{blue},
    keywordstyle=[2]\\color{red!60!black},
    ={\\color{brown!50!black}\\bfseries},
    morecomment=[l]{\\#},
    showstringspaces=false,
    stringstyle=\\color{green!50!black},
    captionpos=b,
    literate=%
      {\\{}{{\\CodeSymbol{\\{}}}1
      {\\}}{{\\CodeSymbol{\\}}}}1
      {(}{{\\CodeSymbol{(}}}1
      {)}{{\\CodeSymbol{)}}}1
      {>}{{\\CodeSymbol{>}}}1
      {<}{{\\CodeSymbol{<}}}1
      {=}{{\\CodeSymbol{=}}}1
      {;}{{\\CodeSymbol{;}}}1
      {[}{{\\CodeSymbol{[}}}1
      {]}{{\\CodeSymbol{]}}}1
      {:}{{\\CodeSymbol{:}}}1
      {.}{{\\CodeSymbol{.}}}1
      {+}{{\\CodeSymbol{+}}}1
      {-}{{\\CodeSymbol{-}}}1
      {`}{{\\CodeSymbol{\\`{}}}}1
  }
\\lstdefinelanguage{output}{
  basicstyle=\\ttfamily\\footnotesize,
  columns=fullflexible,
  backgroundcolor=\\color{gray!180!black},
  xleftmargin=0.5cm,frame=tlbr,framesep=4pt,framerule=0pt
  }"

print "
\\lstdefinestyle{antlr}{
    basicstyle=\\footnotesize\\ttfamily,
    language=Java,
    moredelim=[s][\\color{green!50!black}\\ttfamily]{'}{'},
    moredelim=*[s][\\bf]{options}{\\}},
    emph=[1]{lexer,header,parser},
    emphstyle=[1]{\\color{green!70!black}\\ttfamily},
    commentstyle={\\color{gray}\\itshape},
    alsoletter={:,|,;},
    morekeywords={:,|,;},
    keywordstyle={\\color{black}\\bf},
}"

class Kernel:
  def code file, capt => none:
    code = Process.exec "cat examples/%s.hal" % file
    exec = Process.exec "hal examples/%s.hal" % file

    figure options => "h!":
      lstlisting options => "language=hal":
        print code.output

      lstlisting options => "language=output":
        print exec.output if exec.status == 0 else print exec.error

      caption pstyle capt if not capt.none?
      label file

  def antlr file=>"../../src/hal/parser/Hal.g", fl=>none, ll=>none, style=>"antlr":
    options ="frame=single,style=%s" % style
    options = options + ",firstline=%s" % fl if not fl.none? else ""
    options = options + ",lastline=%s" % ll if not ll.none? else ""
    lstinputlisting file, options=>options
