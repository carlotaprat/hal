section "Syntax"

subsection "Indentation"

p "We wanted |HAL| to be **readable**, **clean** and **easy to write**. We think that one of the
  things |Python| does well is the way it defines blocks by indentation because it avoids the verbosity
  of a *closing* token. We wanted |HAL| to be as non-verbose as possible. The relevant part of the
  grammar that allows blocks by indentation is the following:"

antlr fl=>51, ll=>118

p "It is also important, when the |NEWLINE| tokens are emited:"

antlr fl=>533, ll=>570

subsection "Lexical rules"

p "The lexical rules are really simple. We tried to have a small set of keywords:"

antlr fl=>428, ll=>481
antlr fl=>484, ll=>575

p "Thus giving the programmer more freedom to define its own *keywords*."

code "unless", "It's easy to create new *expressions* in |HAL|. Notice how similar to |if| looks."

clearpage

subsection "Grammatical rules"

p "The grammar is a bit complex. We engineered it thinking in |HAL| (the result) instead of thinking
 in the grammar itself. Because of that, we used some helpful Java functions, using multiple features
 of |antlr| to disambiguate some cases:"

antlr fl=>121, ll=>172

clearpage
p "Some important features of the grammar are:"

itemize:
  item; p "Statements with if at the end (|a if cond else b|)."
  item; p "List expressions (|[i for i in range 3] == [0,1,2]|)."
  item; p "Statements such if, for, while or import."
  item; p "*Intelligent* spaces in arguments lists:"
  lstlisting options=>"language=hal":
    p "
def a: 5
a - 1 # 4
a-1   # 4
a -1  # Call a with argument -1
"
  item; p "Function calls with optional parentheses"
  item; p "Multiline indented lambda blocks"

antlr fl=>177, ll=>426

p "The major problem we encountered with the syntax is that a call with a lambda block is not an expression, but a call without a lambda block is
(this will be fixed soon!).
  Thus, we needed to help the parser to **differentiate** between these two rules that start in the same way. To do so, we used the |:|
  keyword present in a call with a lambda block **before the end of the line**: iff it is present, then is a lambda block call.
  There are other rules that use interesting tricks (checking token separation, spacing...)."

clearpage
