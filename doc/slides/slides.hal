import haltex

documentclass "beamer"

usepackage "inputenc", options => "utf8"

import haltex.utils
import haltex.beamer

usetheme "Madrid"

print "\\setbeamertemplate{navigation symbols}{}
\\setbeamertemplate{footline}[page number]{}"

title "HAL"
titlegraphic "\\includegraphics[scale=0.15]{hal.png}"
author "Héctor Ramón i Alvaro Espuña"
date "4 de juny de 2014"

document:
  frame "\\titlepage"

  frame "Objectiu", options => "fragile":
    p "Crear un llenguatge de programació:"

    itemize:
      item; p "Que ens resulti útil en el futur"
      item; p "Fàcil d'escriure i de llegir"
      item; p "Molt dinàmic"
      item; p "Que incorpori bones idees d'altres llenguatges (|Python|, |Ruby|,...)"

    code "hello5"

  frame "Característiques":
    itemize:
      item; p "Sintaxi **neta**, perfecta per crear **D**omain-**S**pecific **L**anguages"
      item; p "Arquitectura **orientada a objectes** amb **herència**"
      item; p "**Dynamic typing** i **duck typing**"
      item; p "Mètodes *builtin* que es poden **reescriure** en |HAL| mateix"
      item; p "**Importació** de mòduls"
      item; p "Funcions de **primera classe**"
      item; p "Intèrpret interactiu i fàcilment extensible"

  frame "Sintaxi neta", options => "fragile":
    code "quicksort"

  frame "*List comprehension*", options => "fragile":
    code "list_comprehension"

  frame "Funcions de primera classe", options => "fragile":
    code "first_class_methods"

  frame "Lambda blocks", options => "fragile":
    code "blocks_times"

  frame "*Backticks*", options => "fragile":
    code "backticks"

  frame "Espais significatius", options => "fragile":
    code "spaces_matter"

  frame "Four levels of scopes":
    description:
      item "Local"; p "Sense *accessor*"
      item "Instance"; p "Utilitzant |@|"
      item "Static"; p "Utilitzant |@@|"
      item "Module"; p "Variables d'instancia definides al mòdul actual"

    p "Si un nom es referencia sense *accessor*, |HAL| busca el nom seguint aquest ordre."

  frame "Classes natives", options=>"fragile":
    itemize:
      item; p "Boolean"
      item; p "Class"
      item; p "Enumerable"
      itemize:
        item; p "Array"
        item; p "Dictionary"
        item; p "String"
      item; p "File"
      item; p "Kernel"
      itemize:
        item; p "Module"
      item; p "None"
      item; p "Number"
      itemize:
        item; p "Float"
        item; p "Integer"
        item; p "Long"
        item; p "Rational"
      item; p "Object"
      item; p "Package"
      item; p "Process"

  frame "Tipus de dades bàsics", options=> "fragile,breaklines=true":
    lstlisting options=>"style=java":
      write "
public abstract class HalNumber<T extends Number>
    extends HalObject<T> {
  public abstract HalNumber add(HalNumber n);

  public abstract boolean canCoerce(HalObject n);
  public abstract HalNumber coerce(HalObject n);"

  frame "Tipus de dades bàsics", options=> "fragile":
   lstlisting options=>"style=java":
     write "
private static final Reference __add__ =
  new Reference(new Builtin(\"add\", new Params.Param(\"x\")) {
    @Override
    public HalObject mcall(HalObject instance,
      HalMethod lambda, Arguments args) {
       HalNumber i = ((HalNumber) instance);
       HalObject x = args.get(\"x\");

            if (!i.canCoerce(x))
                return x.methodcall(\"__radd__\", i);

            return i.add(i.coerce(x));
        }
    });"

  frame "Tipus de dades bàsics", options => "fragile":
   lstlisting options=>"style=java":
     write "
public static final HalClass klass =
   new HalClass(\"Number\", HalObject.klass,
  // ...
  __add__,
  // ...
);"

   lstlisting options=>"style=java":
      write "
class HalInteger extends HalNumber<Integer> {
 // ...
 @Override
 public HalNumber add(HalNumber n) {
   if (addOverflows(toInteger(), n.toInteger()))
     return new HalLong(toInteger())
            .add(new HalLong(n.toInteger()));
   return new HalInteger(toInteger() + n.toInteger());
 }
 // ...
}"

  frame "Tipus de dades bàsics":
    p "Altres mètodes dels Numèrics:"
    itemize:
      item "·"; p "|bool|"
      item "·"; p "|pos|"
      item "·"; p "|neg|"
      item "·"; p "|sub|"
      item "·"; p "|mul|"
      item "·"; p "|pow|"
      item "·"; p "|div|"
      item "·"; p "|mod|"
      item "·"; p "|ddiv|"
      item "·"; p "|eq|"
      item "·"; p "|lt|"

  frame "|HALTeX|", options => "fragile":
    code "haltex"
