@packages = {}
@typewrites = []

def env name, *args, options => none:
  write "\\begin{%s}" % name
  write_options options
  write_args args
  print
  yield
  p "\\end{%s}" % name


def write_options options:
  write "[%s]" % options if not options.none?


def write_args args:
  if args:
    args.each with arg: write "{", arg, "}"


def wrap:
  write "{"
  yield
  print "}"


class Kernel:
  def __method_missing__ name, *args, options => none, special => false:
    if block_given?:
      env name, *args, options => options: yield
    else:
      write "\\", name
      write "*" if special
      write_options options
      write_args args
      print

  def cover title, subject, authors, footer, image => none:
    titlepage:
      center:
        textsc "\\Large %s" % subject; br 1.5
        hrule; br 0.4
        wrap: huge; bfseries; print title; br 0.4
        hrule; br 2.5

        if authors.size == 2:
          minipage "0.4\\textwidth":
            flushleft: large; print authors[0]

          minipage "0.4\\textwidth":
            flushright: large; print authors[1]
        else:
          center:
            large; print authors[0]

        if not image.none?:
          includegraphics image

        vfill
        wrap: large; today
        br
        wrap: large; texttt footer

  def br size => none, units => "cm":
    write "\\\\"
    write "[", size, units, "]" if not size.none?
    print

  def p *args:
    ps = args.map with arg: pstyle arg
    write *ps
    print

  def c code:
    print code.strip "\n"

  def typewrite *words:
    for word in words: typewrites << word

  def pstyle paragraph:
    paragraph = paragraph.gsub("\\b(" + typewrites.join('|') + ")\\b", "|$1|") if typewrites
    paragraph \
      .gsub(r/\*\*((\n|[^\*])*)\*\*/, "\\\\textbf{$1}") \
      .gsub(r/\*([^\*]*)\*/, "\\\\emph{$1}") \
      .gsub(r/\|([^\|]*)\|/, "\\\\texttt{$1}") \
      .gsub(r/#/, "\\\\") \
      .gsub("LaTeX", "\\\\LaTeX{}")

  def hrule:
    rule "\\linewidth", "0.5mm"

  def usepackage pkg, options => none:
    packages[pkg] = true
    __method_missing__ "usepackage", pkg, options => options

  def needs pkg:
    usepackage pkg if not packages.has_key? pkg

  def item description => none:
    options = none if description.none? else options = pstyle description
    __method_missing__ "item", options => options

  def caption text:
    __method_missing__ "caption", pstyle text

  def row col, *cols:
    write "$", col.str, "$" if col != ""

    cols.each with col:
      write " & $", col, "$ "
    p "##"

  def head *heads:
    row *heads
    hline

  def question text:
    item; textbf pstyle text
    br
