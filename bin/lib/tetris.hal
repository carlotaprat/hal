from input import Keyboard
from opengl import display, draw, projection, ortho, disable, clear, DEPTH_TEST, color, line
from tetris.pieces import random_piece, Square


class Game:
  @keys = [ Keyboard.KEY_LEFT, Keyboard.KEY_RIGHT, Keyboard.KEY_DOWN, Keyboard.KEY_UP,
    Keyboard.KEY_SPACE ]

  def init:
    @board = Board.new
    @status_bar = StatusBar.new
    @time_still = 0
    @infinity = 500
    @drop = false
    @next = none
    new_piece!

  def new_piece!:
    @piece = @status_bar.next_piece!.new @board

  def over?:
    @board.full?

  def update! delta:
    @time_still = @time_still + delta

    if board.busy?:
      board.update

    elif @drop == false:
      process_keys delta

      if @time_still > @infinity:
        @time_still = @time_still - @infinity
        new_piece! if not piece.down!

    else:
      falling = piece.down!
      falling = piece.down! if falling

      if not falling:
        new_piece!
        @drop = false

  def process_keys delta:
    Keyboard.poll @@keys, delta with key, kept:
        case key:
          when Keyboard.KEY_LEFT:
            piece.left!
          when Keyboard.KEY_RIGHT:
            piece.right!
          when Keyboard.KEY_DOWN:
            @time_still = 0
            new_piece! if not piece.down!
          when Keyboard.KEY_UP:
            piece.rotate_left!
          when Keyboard.KEY_SPACE:
            @drop = true if not kept
          
  def render:
    @piece.render
    @board.render
    @status_bar.render


class Board:
  @hcells = 10
  @vcells = 20
  @width = @hcells * Square.width
  @height = @vcells * Square.width

  def init:
    @cells = [ [ none for _ in range(@@hcells) ] for _ in range(@@vcells) ]
    @row_count = [ 0 for _ in range(@@vcells) ]
    @clear_queue = []
    @full? = false

  def add! squares:
    for square in squares:
      if square.y >= 0:
        @cells[square.y][square.x] = square
        @row_count[square.y] = @row_count[square.y] + 1 # TODO: Add native += operator
        @clear_queue.append! square.y if @row_count[square.y] == 10
        @full? = true if square.y == 0
    @clear_queue.sort!

  def busy?:
    @clear_queue != []

  def update:
    row = @clear_queue.first
    @clear_queue.pop!
    
    # Move cells down
    for i in range(1, row):
      current = row - i
      @row_count[current+1] = @row_count[current]

      for index, cell in @cells[current]:
        @cells[current+1][index] = cell
        cell.y = cell.y + 1 if not cell.none?

  def taken? x, y:
    (x < 0 or x >= @@hcells or y >= @@vcells or (y >= 0 and not @cells[y][x].none?))

  def render:
    for row in @cells:
      for cell in row:
        cell.render if not cell.none?

    # Board grid
    color 0.2, 0.2, 0.2

    for i in range(@@hcells + 1):
      line i * Square.width, 0, i * Square.width, @@height

    for i in range(@@vcells):
      line 0, i * Square.width, @@width, i * Square.width


class StatusBar:
  @width = 240

  def init:
    @current = none
    @squares = []
    next_piece!

  def next_piece!:
    old = @current
    @current = random_piece
    @squares = @current.squares_at Board.hcells + 1, 2
    old

  def render:
    for square in @squares:
      square.render

    color 0.2, 0.2, 0.2

    for i in range(Board.hcells + 1, Board.hcells + 6):
      line i * Square.width, 2 * Square.width, i * Square.width, 6 * Square.width

    for i in range(2, 7):
      line (Board.hcells + 1) * Square.width, i * Square.width, (Board.hcells + 5) * Square.width,
        i * Square.width


def play:
  game = Game.new

  display title => "HALtris", width => Board.width + StatusBar.width, height => Board.height:
    # Initialize OpenGL
    projection: ortho 0, Board.width + StatusBar.width, Board.height, 0, 0, 1
    disable DEPTH_TEST

    draw fps => 60 with delta:
      clear
      
      game.update! delta
      game.render
      
play
